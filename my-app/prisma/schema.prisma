generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  imageUrl  String   @db.Text
  email     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  servers   Server[]
  members   Member[]
  channels  Channel[]
}

model Server {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String   @db.Text
  inviteCode String   @unique
  members    Member[]
  channels   Channel[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profileId  String
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@index([profileId])
}

enum Roles {
  Admin
  Moderator
  Guest
}

model Member {
  id        String   @id @default(uuid())
  role      Roles    @default(Guest)
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([profileId])
  @@index([serverId])
}

enum ChannelTypes {
  Text
  Audio
  Video
}

model Channel {
  id        String       @id @default(uuid())
  name      String
  type      ChannelTypes @default(Text)
  profileId String
  profile   Profile      @relation(fields: [profileId], references: [id])
  serverId  String
  server    Server       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  @@index([profileId])
  @@index([serverId])
}
